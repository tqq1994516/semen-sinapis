//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "policy")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde(skip_deserializing)]
    pub id: i64,
    pub name: String,
    pub resource_type: i64,
    pub resource: i64,
    pub action: String,
    pub allow: String,
    pub create_time: Option<TimeDateTimeWithTimeZone>,
    pub update_time: Option<TimeDateTimeWithTimeZone>,
    pub owner: Option<i64>,
    pub available: bool,
    pub organization: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::resource_type::Entity",
        from = "Column::ResourceType",
        to = "super::resource_type::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    ResourceType,
    #[sea_orm(
        belongs_to = "super::user_info::Entity",
        from = "Column::Owner",
        to = "super::user_info::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    UserInfo,
    #[sea_orm(
        belongs_to = "super::organization::Entity",
        from = "Column::Organization",
        to = "super::organization::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Organization,
}

impl Related<super::resource_type::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ResourceType.def()
    }
}

impl Related<super::role::Entity> for Entity {
    fn to() -> RelationDef {
        super::role_policy::Relation::Role.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::role_policy::Relation::Policy.def().rev())
    }
}

impl Related<super::user_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserInfo.def()
    }
}

impl Related<super::organization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organization.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

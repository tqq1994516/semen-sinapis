//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user_info")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde(skip_deserializing)]
    pub id: i64,
    pub name: String,
    pub password: String,
    #[sea_orm(unique)]
    pub email: Option<String>,
    #[sea_orm(unique)]
    pub phone: Option<String>,
    pub online: Option<bool>,
    pub info: Option<Json>,
    pub organization: i64,
    pub accessible: bool,
    pub period_of_validity: Option<TimeDateTimeWithTimeZone>,
    pub create_time: Option<TimeDateTimeWithTimeZone>,
    pub update_time: Option<TimeDateTimeWithTimeZone>,
    pub available: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::permission::Entity")]
    Permission,
    #[sea_orm(has_many = "super::policy::Entity")]
    Policy,
    #[sea_orm(has_many = "super::resource_type::Entity")]
    ResourceType,
    #[sea_orm(has_many = "super::role::Entity")]
    Role,
    #[sea_orm(
        belongs_to = "super::organization::Entity",
        from = "Column::Organization",
        to = "super::organization::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Organization,
}

impl Related<super::permission::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Permission.def()
    }
}

impl Related<super::policy::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Policy.def()
    }
}

impl Related<super::resource_type::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ResourceType.def()
    }
}

impl Related<super::role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Role.def()
    }
}

impl Related<super::organization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organization.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
